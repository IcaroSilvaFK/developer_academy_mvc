<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/assets/styles/pages/new_challenge.css">
  {{ template "templates/head.tmpl" }}
  <title>Document</title>
</head>

<body x-data="teste">
  {{template "templates/header.tmpl" }}
  <main class="container__main">
    <header>
      <h1>Novo Desafio</h1>
    </header>
    <form @submit.prevent="handleSubmit">
      <div class="container__input">
        <label>
          Título do desafio
        </label>
        <input name="title" placeholder="Digite o titúlo do desafio" @click="removeErrorAttribute" />
      </div>
      <div class="container__input">
        <label>
          Breve Descrição
        </label>
        <textarea name="description" placeholder="Digite uma breve descrição do desafio"
          @click="removeErrorAttribute"></textarea>
      </div>
      <div class="container__input">
        <label>
          YouTube Video Embed URL
        </label>
        <textarea name="embed_url" placeholder="Digite a url do vídeo no YouTube"
          @click="removeErrorAttribute"></textarea>
      </div>
      <footer>
        <button>
          <span x-show="!loading">
            Enviar
          </span>
          <span x-show="loading">
            Criando...
          </span>
        </button>
      </footer>
    </form>
  </main>
  <script>
    document.addEventListener("alpine:init", () => {
      Alpine.data("teste", () => ({
        loading: false,
        handleSubmit: async (ev) => {
          const target = ev.target
          const formKeys = ["title", "embed_url", "description"]
          const payload = {}

          for (const key of formKeys) {
            const currentTargetValue = target[key].value
            if (!currentTargetValue.trim()) {
              target[key].setAttribute("error", "true")
              continue
            }
            payload[key] = currentTargetValue
          }


          if (!Object.keys(payload).length) return

          try {
            this.loading = true

            await axios({
              method: "POST",
              url: "/api/v1/challenges",
              data: payload
            })

            for (const key of formKeys) {
              target[key].value = ""
            }

            bulmaToast.toast({
              type: "is-success",
              message: "Desafio criado com sucesso!"
            })


          } catch (err) {
            console.log(err)
            bulmaToast.toast({
              type: "is-danger",
              message: "Parece que ocorreu um erro ao criar o desafio!"
            })
          } finally {
            this.loading = false
          }
        },
        removeErrorAttribute: (ev) => {
          ev.target.removeAttribute("error")
        },

      }))

    })

  </script>
</body>

</html>