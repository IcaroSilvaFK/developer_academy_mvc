<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/assets/styles/pages/profile.css">
  {{ template "templates/head.tmpl" }}
  <title>DEVELOPER ACADEMY | Perfil</title>
</head>
<body>
  {{template "templates/header.tmpl" .}}
  
  <main x-data="main" class="container__main">
   <section class="container__section section__column">
      <header>
        <h2>Perfil</h2>
        <span>Você pode visualizar seu perfil, mas não pode editar suas informações.</span>
      </header>
       
      <div>
        <div class="container__col">
          <label>Username</label>
          <input type="text" value="{{ .user.Name }}" readonly>
        </div>
        <div class="container__col">
          <label>Email</label>
          <input type="text" value="{{ .user.Email }}" readonly>
        </div>
      </div>
      <div class="container__col">
        <label>Bio</label>
        <textarea readonly>{{ .user.Bio }}</textarea>
      </div>
    </section>


   <section class="container__section">
     
    <header>
      <h2>Desafios</h2>

      <p>
        Meus desafios
        <i class="ph ph-rocket"></i>
      </p>
    </header>
       
       <ul class="container__cards">
        <template x-for="challenge in challenges">
          <li class="container__card">
            <div>
              <h4 x-text="challenge.title"></h4>
              <p x-text="challenge.description"></p>
            </div>
            <button @click="deleteChallenge(challenge.id)">
              <i class="ph ph-trash"></i>
            </button>
          </li>
        </template>
      </ul>
    </section>
    <script>

      document.addEventListener("alpine:init", () => {
        Alpine.data("main", () => ({
          challenges: {{ .challenges }},
          async deleteChallenge(id) {
            try{
             
              await axios({
                method: "DELETE",
                url: `/api/v1/challenges/${id}`
              })

              this.removeChallenge(id)

              bulmaToast.toast({
                type: "is-success",
                message: "Desafio deletado com sucesso!"
              })

            }catch(err){
              console.log(err)
              
              bulmaToast.toast({
                type: "is-danger",
                message: "Parece que tivemos um problema ao deletar o desafio"
              })

            }
          },
          removeChallenge(id){
            this.challenges = this.challenges.filter(challenge => challenge.id !== id)
          }
        }))
      })
      const mock = Array.from({length:10}).map((_, idx) => ({
        title: `Desafio ${idx+1}`,
        createdAt: dayjs(new Date()).fromNow(),
        description: 'Esta é uma descrição teste',
        id: window.crypto.randomUUID()
      }))
    </script>
  </main>
</body>
</html>
