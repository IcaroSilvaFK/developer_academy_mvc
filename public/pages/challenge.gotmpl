<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/assets/styles/pages/challenge.css">
  {{ template "templates/head.tmpl" }}
  <title>DEVELOPER ACADEMY | {{.challenge.Title}}</title>
</head>

<body>
  {{template "templates/header.tmpl" .}}
  <main x-data="content" class="container__main">
    <div>
      <header>
        <div class="header__presentation">
          <span>Desafio</span>
          <span x-text="dayjs(new Date('{{ .created }}')).fromNow()"></span>
        </div>
        <div class="header__title">
          <h2>{{ .challenge.Title }}</h2>
          <p>
            {{ .challenge.Description }}
          </p>
        </div>
      </header>
      <section class="container__video" x-html="video">

      </section>

      <section class="container__comments">
        <h3 x-text="quantityComments > 1 ? quantityComments + ' Comentários' : quantityComments + ' Comentário'">

        </h3>
        <ul>
          <template x-for="comment in comments">
            <li class="container__comment">
              <div>
                <header>
                  <span x-text="dayjs(new Date(comment.created_at)).fromNow()"></span>
                </header>
                <p x-text="comment.comment"></p>
              </div>

              <button title="Deletar comentário" class="button__delete_comment"
                x-show="comment.user_id === '{{.user.ID}}'" @click="deleteComment(comment.id)">
                <i class="ph ph-trash"></i>
              </button>
            </li>
          </template>
        </ul>

        <span x-show="quantityComments <= 0">
          Seja o pioneiro a deixar um comentário! <i class="ph ph-smiley-sticker"></i>
        </span>

        <form @submit.prevent="onAddComment">
          <textarea placeholder="Escreva seu comentário" name="comment"></textarea>
          <button :disabled="isAddingComment">
            <span x-text="!isAddingComment ? 'Comentar': 'Adicionando comentário...'"></span>
            <i class="ph ph-chat-teardrop"></i>
          </button>
        </form>
      </section>
    </div>
    <section class="container__help">
      <header>
        <i class="ph ph-lightbulb"></i>
        <h3>Dicas sobre o tema</h3>
      </header>
      <ol>
        <template x-for="h in hint">
          <li x-text="h"></li>
        </template>
      </ol>
    </section>
  </main>

  {{ template "templates/footer.tmpl" }}

  <script>

    document.addEventListener("alpine:init", () => {
      Alpine.data("content", () => ({
        comments: {{.comments}},
      hint: [],
      video: {{.challenge.EmbedUrl}},
      quantityComments: {{.quantityComments}},
      isAddingComment: false,
      addNewComment(comment) {
      this.comments = [...this.comments, comment]
          this.quantityComments = this.comments.length
    },
      async onAddComment(ev) {
      const comment = ev.target.comment.value

          if(!comment.trim()) return

    try {
      this.handleToggleLoading()
      const payload = {
        challenge_id: '{{.id}}',
        user_id: '{{ .user.ID }}',
        comment,
      }

      const {data} = await axios({
        method: "POST",
        url: "/api/v1/challenges/comments",
        data: payload
      })

      this.addNewComment(data)
      ev.target.comment.value = ""

      bulmaToast.toast({
        type: "is-success",
        message: "Comentário adicionado com sucesso!"
      })
    } catch (err) {
      console.log(err)
      bulmaToast.toast({
        type: "is-danger",
        message: "Estamos com problemas para adicionar o comentário."
      })
    } finally {
      this.handleToggleLoading()
    }
        },
    sanitizeData(text) {
      const arr = text.split("\n")

      const result = []

      for (const item of arr) {
        result.push(item)
      }

      return result
    },
        async deleteComment(id) {
      try {
        await axios({
          url: `/api/v1/challenges/comments/${id}`,
          method: "DELETE"
        })
        this.comments = this.comments.filter(comment => comment.id !== id)
        this.quantityComments = this.comments.length
        bulmaToast.toast({
          type: "is-success",
          message: "Comentário deletado com sucesso!"
        })

      } catch (err) {
        console.log(err)
        bulmaToast.toast({
          type: "is-danger",
          message: "Estamos com problemas para deletar o comentário por favor tente novamente mais tarde!"
        })
      }
    },
    handleToggleLoading() {
      this.isAddingComment = !this.isAddingComment
    },
    init() {
      this.hint = this.sanitizeData({{.challenge.Hint.Text}})
        }     
      }))
    })

  </script>
</body>

</html>